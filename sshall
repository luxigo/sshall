#!/bin/bash
#
# sshall
#
# Copyright (c) 2013-2014 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#      You are required to preserve legal notices and author attributions in
#      that material or in the Appropriate Legal Notices displayed by works
#      containing it.
#
#      You are required to attribute the work as explained in the "Usage and
#      Attribution" section of <http://foxel.ch/license>.

# Examples:

#### basic usage
# HOSTS="user@hostonline user@hostoffline" sshall true
# sshall: user@hostonline status 0
# sshall: user@hostoffline stderr Permission denied (publickey,password).
# sshall: user@hostoffline status 255
#
#### more complex usage.
## send commands from stdin -> then call "bash" to remove server banner
## add -t -t to force pseudo tty allocation and be able to parse command output
## optionally quote EOF to disable substitutions 
# $ HOSTS=user@host bin/sshall -t -t bash << 'EOF'
# $ pwd
# $ echo $HOSTNAME
# $ exit
# $ EOF
# sshall: user@host stdout pwd
# sshall: user@host stdout echo $HOSTNAME
# sshall: user@host stdout date
# sshall: user@host stdout user@host:~$ pwd
# sshall: user@host stdout /home/user
# sshall: user@host stdout user@host:~$ echo $HOSTNAME
# sshall: user@host stdout host
# sshall: user@host stdout user@host:~$ exit
# sshall: user@host stdout exit
# sshall: user@host stderr Connection to host closed.
# sshall: user@host status 0

[ -n "$DEBUG" ] && set -x

[ -z "$SSHOPTIONS" ] && SSHOPTIONS="-o BatchMode=yes -o StrictHostKeyChecking=no -o PubKeyAuthentication=yes -o PasswordAuthentication=no"

THIS=$(basename $0)

usage() {
  echo "usage: HOSTS=\"<user@host> ...\" $THIS <command> [ <argument> ... ]"
  echo
  exit $1
}

[ "$1" = "-h" -o "$1" = "--help" ] && usage 0
if [ $# -eq 0 ] ; then
  [ -t 0 -a -z "$SCRIPT" ] && usage 1
  cat 
fi

if [ ! -t 0 ] ; then
  SCRIPT=/tmp/stdin.$$.tmp
  cat > $SCRIPT
fi

userathost=($HOSTS)
[ ${#HOSTS[@]} -eq 0 ] && usage 1

sshlog() {
  ARG=(${1/:/ })
  HOST=${ARG[0]}
  PORT=${ARG[1]}
  [ -z "$PORT" ] && PORT=22
  STATUS_FILE=$(mktemp)
  echo 1 > $STATUS_FILE
  shift
  { ssh -p $PORT $SSHOPTIONS $HOST $@ 2>&3 | while read stdout ; do
       echo "$THIS: ${HOST} stdout $stdout"
    done
    echo ${PIPESTATUS[0]} > $STATUS_FILE
  } 3>&1 >&2 | while read stderr ; do
    echo "$THIS: ${HOST} stderr $stderr"
  done
  STATUS=$(cat $STATUS_FILE)
  rm $STATUS_FILE
  return $STATUS
}

for (( i=0; $i<${#userathost[@]} ; ++i )) do
  if [ -n "$SCRIPT" ] ; then
    ( sshlog ${userathost[$i]} $@ < "$SCRIPT" ; echo $THIS: ${userathost[$i]} status $? ) &
  else
    ( sshlog ${userathost[$i]} $@ ; echo $THIS: ${userathost[$i]} status $? ) &
  fi
done

trap "killtree -9 $BASHPID" EXIT SIGINT SIGTERM
wait
